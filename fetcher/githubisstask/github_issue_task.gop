/*
Copyright 2024 The GoPlus Authors (goplus.org)
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package githubisstask

import (
	"strings"

	"github.com/goplus/hdq"
	"github.com/goplus/hdq/fetcher"
)

type Task struct {
	Desc string `json:"desc"`
	Done bool   `json:"done"`
}

type Result struct {
	Issue string `json:"issue"` // goplus/llgo#642
	Tasks []Task `json:"tasks"`
}

// New creates a new Result from a html document.
func New(input any, doc hdq.NodeSet) Result {
	issue := input.(string)
	taskList := doc.any.ul.class("contains-task-list").one
	tasks := [Task{li.text!, li.firstElementChild.hasAttr("checked")} for li <- taskList.child.li]
	return {issue, tasks}
}

// URL returns the input URL for the given name.
func URL(input any) string {
	issue := input.(string)
	if strings.hasPrefix(issue, "https://github.com/") {
		return issue
	}
	return "https://github.com/" + strings.Replace(issue, "#", "/issues/", 1)
}

func init() {
	fetcher.Register("githubisstask", New, URL)
}
