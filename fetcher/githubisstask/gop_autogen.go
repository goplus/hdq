// Code generated by gop (Go+); DO NOT EDIT.

package githubisstask

import (
	"github.com/goplus/hdq"
	"github.com/goplus/hdq/fetcher"
	"github.com/qiniu/x/errors"
	"strings"
)

const GopPackage = "github.com/goplus/hdq"
const _ = true

type Task struct {
	Desc string `json:"desc"`
	Done bool   `json:"done"`
}
type Result struct {
	Issue string `json:"issue"`
	Tasks []Task `json:"tasks"`
}
//line fetcher/githubisstask/github_issue_task.gop:35:1
// New creates a new Result from a html document.
func New(input interface{}, doc hdq.NodeSet) Result {
//line fetcher/githubisstask/github_issue_task.gop:37:1
	issue := input.(string)
//line fetcher/githubisstask/github_issue_task.gop:38:1
	taskList := doc.Any().Ul().Class("contains-task-list").One()
//line fetcher/githubisstask/github_issue_task.gop:39:1
	tasks := func() (_gop_ret []Task) {
//line fetcher/githubisstask/github_issue_task.gop:39:1
		taskList.Child().Li().Gop_Enum(func(li hdq.NodeSet) {
//line fetcher/githubisstask/github_issue_task.gop:39:1
			_gop_ret = append(_gop_ret, Task{func() (_gop_ret string) {
//line fetcher/githubisstask/github_issue_task.gop:39:1
				var _gop_err error
//line fetcher/githubisstask/github_issue_task.gop:39:1
				_gop_ret, _gop_err = li.Text__0()
//line fetcher/githubisstask/github_issue_task.gop:39:1
				if _gop_err != nil {
//line fetcher/githubisstask/github_issue_task.gop:39:1
					_gop_err = errors.NewFrame(_gop_err, "li.text", "fetcher/githubisstask/github_issue_task.gop", 39, "githubisstask.New")
//line fetcher/githubisstask/github_issue_task.gop:39:1
					panic(_gop_err)
				}
//line fetcher/githubisstask/github_issue_task.gop:39:1
				return
			}(), li.FirstElementChild().HasAttr("checked")})
		})
//line fetcher/githubisstask/github_issue_task.gop:39:1
		return
	}()
//line fetcher/githubisstask/github_issue_task.gop:40:1
	return Result{issue, tasks}
}
//line fetcher/githubisstask/github_issue_task.gop:43:1
// URL returns the input URL for the given name.
func URL(input interface{}) string {
//line fetcher/githubisstask/github_issue_task.gop:45:1
	issue := input.(string)
//line fetcher/githubisstask/github_issue_task.gop:46:1
	if strings.HasPrefix(issue, "https://github.com/") {
//line fetcher/githubisstask/github_issue_task.gop:47:1
		return issue
	}
//line fetcher/githubisstask/github_issue_task.gop:49:1
	return "https://github.com/" + strings.Replace(issue, "#", "/issues/", 1)
}
//line fetcher/githubisstask/github_issue_task.gop:52:1
func init() {
//line fetcher/githubisstask/github_issue_task.gop:53:1
	fetcher.Register("githubisstask", New, URL)
}
