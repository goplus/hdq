// Code generated by gop (Go+); DO NOT EDIT.

package links

import (
	"github.com/goplus/hdq"
	"github.com/goplus/hdq/fetcher"
)

const GopPackage = "github.com/goplus/hdq"
const _ = true

type Result struct {
	URL   string   `json:"url,omitempty"`
	Hrefs []string `json:"hrefs,omitempty"`
}
//line fetcher/hrefs/hrefs.gop:28:1
// New collects all href links from a html document.
func New(input interface{}, doc hdq.NodeSet) Result {
//line fetcher/hrefs/hrefs.gop:30:1
	hrefs := func() (_gop_ret []string) {
//line fetcher/hrefs/hrefs.gop:30:1
		doc.Any().A().Gop_Enum(func(a hdq.NodeSet) {
//line fetcher/hrefs/hrefs.gop:30:1
			if
//line fetcher/hrefs/hrefs.gop:30:1
			link := func() (_gop_ret string) {
//line fetcher/hrefs/hrefs.gop:30:1
				var _gop_err error
//line fetcher/hrefs/hrefs.gop:30:1
				_gop_ret, _gop_err = a.Href__0()
//line fetcher/hrefs/hrefs.gop:30:1
				if _gop_err != nil {
//line fetcher/hrefs/hrefs.gop:30:1
					return ""
				}
//line fetcher/hrefs/hrefs.gop:30:1
				return
			}(); link != "" {
//line fetcher/hrefs/hrefs.gop:30:1
				_gop_ret = append(_gop_ret, link)
			}
		})
//line fetcher/hrefs/hrefs.gop:30:1
		return
	}()
//line fetcher/hrefs/hrefs.gop:31:1
	return Result{input.(string), hrefs}
}
//line fetcher/hrefs/hrefs.gop:34:1
// URL returns the input URL for the given input.
func URL(input interface{}) string {
//line fetcher/hrefs/hrefs.gop:36:1
	return input.(string)
}
//line fetcher/hrefs/hrefs.gop:39:1
func init() {
//line fetcher/hrefs/hrefs.gop:40:1
	fetcher.Register("hrefs", New, URL)
}
