// Code generated by gop (Go+); DO NOT EDIT.

package torch

import (
	"github.com/goplus/hdq"
	"github.com/qiniu/x/errors"
	"strings"
)

const GopPackage = "github.com/goplus/hdq"
const _ = true

type Result struct {
	Name string `json:"name"`
	Doc  string `json:"doc"`
	Sig  string `json:"sig"`
}
//line pysig/torch/pysig_torch.gop:32:1
func New(doc hdq.NodeSet) Result {
//line pysig/torch/pysig_torch.gop:33:1
	fn := doc.Any().Dl().Class("py function")
//line pysig/torch/pysig_torch.gop:34:1
	decl := func() (_gop_ret string) {
//line pysig/torch/pysig_torch.gop:34:1
		var _gop_err error
//line pysig/torch/pysig_torch.gop:34:1
		_gop_ret, _gop_err = fn.FirstElementChild().Dt().Text__0()
//line pysig/torch/pysig_torch.gop:34:1
		if _gop_err != nil {
//line pysig/torch/pysig_torch.gop:34:1
			_gop_err = errors.NewFrame(_gop_err, "fn.firstElementChild.dt.text", "pysig/torch/pysig_torch.gop", 34, "torch.New")
//line pysig/torch/pysig_torch.gop:34:1
			panic(_gop_err)
		}
//line pysig/torch/pysig_torch.gop:34:1
		return
	}()
//line pysig/torch/pysig_torch.gop:35:1
	pos := strings.IndexByte(decl, '(')
//line pysig/torch/pysig_torch.gop:36:1
	if pos > 0 {
//line pysig/torch/pysig_torch.gop:37:1
		name := strings.TrimPrefix(decl[:pos], "torch.")
//line pysig/torch/pysig_torch.gop:38:1
		sig := decl[pos:]
//line pysig/torch/pysig_torch.gop:39:1
		return Result{strings.TrimSpace(name), "", strings.TrimSpace(sig)}
	}
//line pysig/torch/pysig_torch.gop:41:1
	return Result{"", "", "<NULL>"}
}
