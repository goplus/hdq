package repos

import (
	"github.com/goplus/hdq"
	"golang.org/x/net/html/atom"
)

// -----------------------------------------------------------------------------

type Repo struct {
	Repo       string
	ForkedFrom string
	Title      string
	Language   string
	UpdateTime string
	Forks      int
}

func newRepo(node hdq.NodeSet) Repo {
	aRepo := node.any.a.attr("itemprop", "name codeRepository").one
	repo := aRepo.href!
	root := aRepo.parentN(3).one
	forkedFrom := root.any.span.any.textContains("Forked from").one.nextSibling(1).a.href?:""
	title := root.any.p.attr("itemprop", "description").text?:""
	language := root.any.span.attr("itemprop", "programmingLanguage").one.text?:""
	updateTime := root.any.element("relative-time").one.attr("datetime")?:""
	forks := root.any.a.attr("href", repo+"/network/members").int?:0
	return {
		Repo:       repo,
		ForkedFrom: forkedFrom,
		Title:      title,
		Language:   language,
		UpdateTime: updateTime,
		Forks:      forks,
	}
}

// -----------------------------------------------------------------------------

type Result struct {
	Repos []Repo
	Next  string
}

// New creates a new Result from a html document.
func New(_ any, doc hdq.NodeSet) Result {
	// divRepos := doc.any.div.id("user-repositories-list").one
	divRepos := doc.any.element(atom.Div).id("user-repositories-list").one
	repoList := divRepos.child.ul.one
	repos := [newRepo(x) for x <- repoList.child.li]
	next := doc.any.div.class("paginate-container").one.any.a.childEqualText("Next").href?:""
	return {Repos: repos, Next: next}
}

// -----------------------------------------------------------------------------
